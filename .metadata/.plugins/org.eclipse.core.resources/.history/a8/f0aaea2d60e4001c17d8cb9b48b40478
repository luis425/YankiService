package com.bootcamp.Yanki.Service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bootcamp.Yanki.api.client.BankAccountApiClient;
import com.bootcamp.Yanki.model.Yanki;
//import com.bootcamp.Yanki.repository.BankAccountRepository;
import com.bootcamp.Yanki.repository.YankiRepository;
import com.bootcamp.Yanki.response.BankAccountResponse;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;
 
@Slf4j
@Service 
public class YankiServiceImpl implements YankiService {

	//private final BankAccountService bankAccountService;
	
	@Autowired
	BankAccountApiClient bankAccountApiClient; 
	
	@Autowired
	YankiRepository yankiRepository;
	
	@Override
	public String processCreateYankiAccount(Yanki yanki) throws InterruptedException {

		//if (bankAccountService.getAllbyNumberAccount().isEmpty()) {

			List<BankAccountResponse> listAccount = this.bankAccountApiClient
					.getBankAccountbyNumberAccount(yanki.getNumberAccount());

			// Al no encontrar el numero de cuenta 
			
			if(listAccount.isEmpty()) {

				this.createYanki(yanki);
				
				log.info("Yanki Register -->" + yanki);
				
				return "Proceso Satisfactorio";

			} else {

				// yanki.setAmount(listAccount.get(0).getAvailableBalanceAccount());
				// this.createYanki(yanki);
				return "Proceso Satisfactorio2";
			}
		//}
			//log.info("From Redis cache " + bankAccountService.getAllbyNumberAccount().toString());
			//return "Processing Draft..."; 
		}

	@Override
	public Mono<Yanki> createYanki(Yanki yanki) {
		 return yankiRepository.save(yanki);
	}
	

}

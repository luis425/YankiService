package com.bootcamp.Yanki.Service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bootcamp.Yanki.api.client.BankAccountApiClient;
import com.bootcamp.Yanki.model.Yanki;
import com.bootcamp.Yanki.model.YankiAccount;
//import com.bootcamp.Yanki.repository.BankAccountRepository;
import com.bootcamp.Yanki.repository.YankiRepository;
import com.bootcamp.Yanki.response.BankAccountResponse;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;
 
@Slf4j
@Service 
public class YankiServiceImpl implements YankiService {

	//private final BankAccountService bankAccountService;
	
	@Autowired
	BankAccountApiClient bankAccountApiClient; 
	
	@Autowired
	YankiRepository yankiRepository;
	
	@Override
	public String processCreateYankiAccount(Yanki yanki) throws InterruptedException {

		//if (bankAccountService.getAllbyNumberAccount().isEmpty()) {

			List<BankAccountResponse> listAccount = this.bankAccountApiClient
					.getBankAccountbyNumberAccount(yanki.getNumberAccount());

			// Al no encontrar el numero de cuenta 
			
			if(listAccount.isEmpty()) {

				//Setear model 
				
				this.yankiRepository.save(yanki);
				
				log.info("Yanki Register -->" + yanki);
				
				return "Proceso Satisfactorio";

			} else {

				// yanki.setAmount(listAccount.get(0).getAvailableBalanceAccount());
				// this.createYanki(yanki);
				return "Proceso Satisfactorio2";
			}
		//}
			//log.info("From Redis cache " + bankAccountService.getAllbyNumberAccount().toString());
			//return "Processing Draft..."; 
		}
	
	
	
	public YankiAccount RegisterDto(Yanki yanki) {

		List<Customer> customers = new ArrayList<>();
		 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date dateBirth = sdf.parse("2001-03-01"); 
		
		customers.add(new Customer(
				"6288256a24f51675daabff60", 
				"CP1", 
				"PRUEBACLIENTEACTUALIZAR", 
				"APELLIDOCLIENTE4",
				"DIRECCIONCLIENTE4", 
				"EMAIL322@PRUEBA.COM",
				"2132132100", 
				dateBirth, 
				new Date(), 
				"213210011",
				new CustomerType(1, "Personal"), 
				new Bank("628570778f9e833491ad8ba4", "cb1", "PRUEBABANCOACTUALIZACION","PRUEBADIRECCIONACTUALIZACION")));

		log.info("Vista Customer con Dni Filtrado -->" + customers);

		return customers;
	}
 
}
